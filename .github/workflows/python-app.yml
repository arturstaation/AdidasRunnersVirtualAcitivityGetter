name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:   

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11.3
      uses: actions/setup-python@v3
      with:
        python-version: "3.11.3"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with pytest
      env:
        PYTHONPATH: src/
      run: |
        pytest -q Testes --cov=src/ --cov-branch --cov-report=term-missing --cov-report=xml:src/coverage.xml
    - name: Upload coverage report (artifact)
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          src/coverage.xml
    - name: Publish coverage summary
      run: |
        coverage=$(grep 'line-rate' src/coverage.xml | sed -E 's/.*line-rate="([^"]+)".*/\1/')
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Line coverage: $coverage" >> $GITHUB_STEP_SUMMARY
  deploy_aws:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Login ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push ECR
        run: |
          ECR_REGISTRY=${{ steps.ecr.outputs.registry }}
          ECR_REPOSITORY=adidasrunners
          IMAGE_TAG=latest

          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Lambda
        run: |
          ECR_REGISTRY=${{ steps.ecr.outputs.registry }}
          ECR_REPOSITORY=adidasrunners
          IMAGE_TAG=latest

          aws lambda update-function-code \
            --function-name adidasrunnersbot \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  send_email:
    runs-on: ubuntu-latest
    needs: [build, deploy_aws]
    if: always()
    steps:
      - name: Compose subject
        id: compose
        run: |
          OVERALL="success"
          if [ "${{ needs.build.result }}" != "success" ] || \
            [ "${{ needs.publish_images.result }}" != "success" ] || \
            [ "${{ needs.deploy_aws.result }}" != "success" ]; then
            OVERALL="failure"
          fi
          echo "subject=CI/CD - adidasrunnersbot: ${OVERALL} (run #${{ github.run_number }})" >> $GITHUB_OUTPUT

      - name: Send Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.EMAIL_TO }}
          secure: true
          subject: ${{ steps.compose.outputs.subject }}
          body: |
            Reposit√≥rio: ${{ github.repository }}
            Workflow: ${{ github.workflow }}

            Status por job:
            - build: ${{ needs.build.result }}
            - publish_images: ${{ needs.publish_images.result }}
            - deploy_aws: ${{ needs.deploy_aws.result }}

            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Autor: ${{ github.actor }}
            Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}